name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run linter
      run: bun run lint

    - name: Type check
      run: bunx tsc --noEmit

    - name: Build application
      run: bun run build
      env:
        NODE_ENV: production

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Build and Push Docker Image
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.actor != 'nektos/act'
    name: Deploy to Kubernetes
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        if [ -z "${{ secrets.KUBECONFIG }}" ]; then
          echo "KUBECONFIG secret not found. Skipping Kubernetes deployment."
          echo "This is expected when running in local act environment."
          exit 0
        fi
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Update deployment image
      run: |
        if [ ! -f "$HOME/.kube/config" ]; then
          echo "Kubernetes config not available. Skipping deployment update."
          exit 0
        fi
        # Use the correct namespace from deployment.yml
        kubectl set image deployment/egel-deployment egel=ghcr.io/${{ github.repository }}:${{ github.sha }} -n egel-nm
        kubectl rollout status deployment/egel-deployment -n egel-nm

    - name: Verify deployment
      run: |
        if [ ! -f "$HOME/.kube/config" ]; then
          echo "Kubernetes config not available. Skipping deployment verification."
          exit 0
        fi
        kubectl get pods -n egel-nm
        kubectl get services -n egel-nm