name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate PR

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run linter
      run: bun run lint

    - name: Type check
      run: bunx tsc --noEmit

    - name: Build application
      run: bun run build
      env:
        NODE_ENV: production

    - name: Check bundle size
      run: |
        bun run build
        ls -la .next/static/chunks/
        echo "Build completed successfully"

    - name: Comment PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## PR Validation Results')
          );
          
          const jobStatus = '${{ job.status }}';
          const emoji = jobStatus === 'success' ? '‚úÖ' : '‚ùå';
          const message = `## PR Validation Results ${emoji}
          
          **Status:** ${jobStatus}
          **Build:** ${jobStatus === 'success' ? 'Passed' : 'Failed'}
          **Linting:** ${jobStatus === 'success' ? 'Passed' : 'Failed'}
          **Type Check:** ${jobStatus === 'success' ? 'Passed' : 'Failed'}
          
          ${jobStatus === 'success' ? 
            'üéâ All checks passed! Your PR is ready for review.' : 
            '‚ö†Ô∏è Some checks failed. Please review the workflow logs and fix any issues.'}
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: message
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
          }